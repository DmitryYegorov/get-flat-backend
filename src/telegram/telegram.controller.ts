import { TelegramService } from "./telegram.services";
import { Context, Markup, Telegraf } from "telegraf";
import { Action, InjectBot, Start, Update } from "nestjs-telegraf";
import * as dayjs from "dayjs";

function getHiddenLink(url, parse_mode = "markdown") {
	const emptyChar = "‚Äé"; // copied and pasted the char from https://emptycharacter.com/
  
	switch (parse_mode) {
	  case "markdown":
		return `[${emptyChar}](${url})`;
	  case "HTML":
		return `<a href="${url}">${emptyChar}</a>`;
	  default:
		throw new Error("invalid parse_mode");
	}
  }

@Update()
export class TelegramController {
    constructor(
        @InjectBot() private readonly bot: Telegraf<Context>,
        private readonly service: TelegramService
    ) {}

    @Start()
    async startCommand(ctx: Context) {
        const from = ctx.message.from;

        const foundUser = await this.service.getUserByTelegram(from.username);
        if (foundUser) {
            await ctx.reply(`${foundUser.firstName} ${foundUser.middleName} ${foundUser.lastName}, —á–µ–º –º–æ–≥—É –≤–∞–º –ø–æ–º–æ—á—å?`, Markup.inlineKeyboard([
                // '–ú–æ–∏ –±—Ä–æ–Ω–∏', '–ú–æ—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å',
                // '–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', '–ù–∞–π—Ç–∏ –∂–∏–ª—å–µ',
                Markup.button.callback('–ú–æ–∏ –±—Ä–æ–Ω–∏', 'my_bookings'),
                Markup.button.callback('–ú–æ—è –Ω–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å', 'my_realty'),
                Markup.button.callback('–û—Å—Ç–∞–≤–∏—Ç—å –æ—Ç–∑—ã–≤', 'add_review'),
                Markup.button.callback('–ù–∞–π—Ç–∏ –∂–∏–ª—å–µ', 'search_realty'),
            ], {
                columns: 2
            }));
        } else {
            await ctx.reply(`${from.first_name} ${from.last_name}, –¥–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –†–µ–∫–æ–º–µ–Ω–¥—É—é –ø—Ä–∏–≤—è–∑–∞—Ç—å —Å–≤–æ–π Telegram-–∞–∫–∫–∞—É–Ω—Ç –∫ –Ω–∞—à–µ–º—É —Å–∞–π—Ç—É —á—Ç–æ–±—ã —è –º–æ–≥ –±—ã—Ç—å –í–∞–º –µ—à—ë –ø–æ–ª–µ–∑–Ω–µ–µ!`);
        }
    }

    @Action('my_bookings')
    async getMyBookings(ctx: Context) {
        const from = ctx.from;
        const user = await this.service.getUserByTelegram(from.username);
        const bookings = await this.service.getMyBookingsList(user.id);

		if (bookings.length === 0) {
			await ctx.reply('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –ø—Ä–µ–¥—Å—Ç–æ—è—â–∏—Ö –±—Ä–æ–Ω–µ–π. –ù–æ –≤—ã –º–æ–∂–µ—Ç–µ –≤—ã–±—Ä–∞—Ç—å —á—Ç–æ-–Ω–∏–±—É–¥—å –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ üòú');
			return;
		}

		await ctx.reply('–í–∞—à–∏ –±—Ä–æ–Ω–∏:', Markup.inlineKeyboard([
			bookings.map(b => {

				const dateStr = `c ${dayjs(b.startDate).format('DD-MM-YYYY')} –ø–æ ${dayjs(b.endDate).format('DD-MM-YYYY')}`;
				const locationStr = `${(b?.realty?.location as any)?.label} ${(b?.realty?.location as any)?.cityName ?? ''}`
				const labelBtn = `${b?.realty?.title} ${dateStr}, ${locationStr}`;
				return Markup.button.callback(labelBtn, `booking-${b.id}`);
			}, {columns: 1})
		]));
    }

	@Action(/booking-(.*)/)
	async getBookingData(ctx: Context) {
		const bookingId = (ctx as any).match[1];
		const booking = await this.service.getBookingById(bookingId);

		const message = [
			`<b>${booking.realty.category.name}</b>: ${booking.realty.title}`,
			`<b>–ì–¥–µ</b>: ${(booking.realty?.location as any)?.flag} ${(booking.realty?.location as any).label ?? ''} ${(booking.realty?.location as any).cityName ?? ''} ${booking.realty?.address}`,
			`<b>–°—Ç–æ–∏–º–æ—Å—Ç—å</b>: ${booking.total}$, (${dayjs(booking.endDate).diff(dayjs(booking.startDate), 'days')} –¥–Ω–µ–π)`,
			`<b>–î–∞—Ç–∞ –≤—ä–µ–∑–¥–∞</b>: <i>${dayjs(booking.startDate).format('DD-MM-YYYY')}</i>`,
			`<b>–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞</b>: <i>${dayjs(booking.endDate).format('DD-MM-YYYY')}</i>`,
			`<b>–ö–æ–ª-–≤–æ –≥–æ—Å—Ç–µ–π</b>: ${booking.guestCount}, ${booking.childrenCount == 0 ? '–±–µ–∑ –¥–µ—Ç–µ–π' : `+ ${booking.childrenCount} –º–µ—Å—Ç –¥–ª—è –¥–µ—Ç–µ–π`}\n`,
			`<b>–ö–æ–¥ –¥–ª—è –≤—ä–µ–∑–¥–∞</b>: <u>${booking.secretCode}</u> - –Ω–∞–∑–æ–≤–∏—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –ø–æ –ø—Ä–∏–µ–∑–¥—É –¥–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —Ö–æ–∑—è–∏–Ω —É–±–µ–¥–∏–ª—Å—è —á—Ç–æ —ç—Ç–æ –í—ã`,

			getHiddenLink(booking.realty.mainPhoto, 'HTML'),
		];

		await ctx.reply(message.join('\n'), {
			parse_mode: 'HTML',
			...Markup.inlineKeyboard([[
				Markup.button.callback('‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', `cancel-booking-${bookingId}`)
			]])
		});
	}
}