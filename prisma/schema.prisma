// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid()) @db.Uuid

  status String @db.VarChar(255) @default("CREATED")
  blockNotes String?

  avatar String? @db.VarChar(255)

  firstName  String  @db.VarChar(255)
  middleName String? @db.VarChar(255)
  lastName   String  @db.VarChar(255)
  role       String? @db.VarChar(255)

  telegram String? @db.VarChar(255)
  chatId String? @db.VarChar(255)

  email             String    @unique @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamptz()
  password          String    @db.VarChar(255)

  createdAt     DateTime?   @default(now()) @db.Timestamptz()
  realties      Realty[]
  favorites     Favorites[]
  bookings      Bookings[]
  sentMessages  Messages[]  @relation("sentMessages")
  realtyReviews Reviews[]
}

model Realty {
  id                 String    @id @default(uuid()) @db.Uuid
  categoryId         String    @db.Uuid
  status             String    @db.VarChar(255)
  rejectionNotes     String?
  description        String?
  ownerId            String    @db.Uuid
  mainPhoto          String    @db.VarChar(255)
  price              Decimal   @db.Money
  guestCount         Int
  bathroomCount      Int
  wcCount            Int
  hasParking         Boolean
  parkingInfo        String?   @db.VarChar()
  city               Json
  address            String
  images             String[]
  hasKitchen         Boolean
  kitchenInfo        String?   @db.VarChar()
  location           Json
  title              String    @db.VarChar()
  roomCount          Int       @default(1)
  childrenCount      Int?      @default(0)
  bathType           String?   @default("bath") @db.VarChar(255)
  showerCount        Int?      @default(0)
  hasPlayground      Boolean?  @default(false)
  bathroomIsCombined Boolean?  @default(false)
  isAccessible       Boolean?  @default(false)
  hasBreakfast       Boolean?  @default(false)
  hasDinner          Boolean?  @default(false)
  hasLunch           Boolean?  @default(false)
  phoneNumber        String    @default("123456789")
  email              String    @default("contatc@home.guru.io")
  withAnimals        Boolean?  @default(false)
  createdAt          DateTime? @default(now())

  owner        User           @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category     RealtyCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  favorites    Favorites[]
  bookings     Bookings[]
  bookingSlots BookingSlots[]
  reviews      Reviews[]
}

model RealtyCategory {
  id          String   @id @default(uuid()) @db.Uuid
  name        String   @db.VarChar(255)
  icon        String?  @db.VarChar(255)
  description String
  realties    Realty[]
}

model Favorites {
  id        String    @id @default(uuid()) @db.Uuid
  realtyId  String    @db.Uuid
  userId    String    @db.Uuid
  createdAt DateTime? @default(now())

  realty Realty @relation(fields: [realtyId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Bookings {
  id            String    @id @default(uuid()) @db.Uuid
  secretCode    String    @default("12345678") @db.VarChar(255)
  status        String    @default("CREATED") @db.VarChar(255)
  realtyId      String    @db.Uuid
  userId        String    @db.Uuid
  startDate     DateTime
  endDate       DateTime
  guestName     String    @default("") @db.VarChar(255)
  guestPhone    String?   @default("") @db.VarChar()
  guestEmail    String?   @default("") @db.VarChar()
  comment       String?
  total         Decimal   @default(0)
  guestCount    Int       @default(1)
  childrenCount Int       @default(0)
  createdAt     DateTime? @default(now())
  confirmed     Boolean?  @default(false)

  realty   Realty     @relation(fields: [realtyId], references: [id], onDelete: Cascade)
  user     User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  Messages Messages[]
  reviews  Reviews[]
}

model Messages {
  id        String   @id @default(uuid()) @db.Uuid
  from      String   @db.Uuid
  text      String
  createdAt DateTime @default(now())
  bookingId String   @db.Uuid
  isRead    Boolean? @default(false)

  fromUser User     @relation(fields: [from], references: [id], onDelete: Cascade, name: "sentMessages")
  booking  Bookings @relation(fields: [bookingId], references: [id], onDelete: Cascade)
}

model BookingSlots {
  id       String   @id @default(uuid()) @db.Uuid
  realtyId String   @db.Uuid
  date     DateTime

  realty Realty @relation(fields: [realtyId], references: [id], onDelete: Cascade)
}

model Reviews {
  id            String   @id @default(uuid()) @db.Uuid
  status        String   @default("CREATED") @db.VarChar()
  rejectNotes   String?
  bookingId     String   @db.Uuid
  rating        Float    @default(0)
  authorId      String   @db.Uuid
  text          String?
  advantages    String?
  disadvantages String?
  isAnonymous   Boolean? @default(false)
  additions     String?
  createdAt     DateTime @default(now())

  booking  Bookings @relation(fields: [bookingId], references: [id])
  author   User     @relation(fields: [authorId], references: [id])
  Realty   Realty?  @relation(fields: [realtyId], references: [id])
  realtyId String?  @db.Uuid
}
